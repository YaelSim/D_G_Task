{"version":3,"sources":["serverInfo.js","components/Welcome.js","components/ChooseWord.js","components/DrawWord.js","components/WaitingPage.js","components/GuessWord.js","App.js","index.js"],"names":["serverInfo","server","concat","Welcome","_useState","useState","_useState2","Object","slicedToArray","name","setName","_useState3","_useState4","room","setRoom","navigate","useNavigate","react_default","a","createElement","className","Box","sx","my","display","flexDirection","alignItems","Typography","color","variant","TextField","label","size","id","onChange","event","target","value","Button","onClick","Axios","post","then","res","localStorage","setItem","data","catch","error","response","get","ChooseWord","words","setWords","useEffect","sendWord","word","currentTarget","textContent","headers","getItem","map","item","i","m","key","react_router_dom","to","style","textDecoration","DrawWord","interval","canvasRef","useRef","contextRef","isDrawing","setIsDrawing","setData","_useState5","_useState6","isSent","setIsSent","_useState7","_useState8","chosenWord","setChosenWord","_useState9","_useState10","sessionScore","setSessionScore","getChosenWord","getSessionScore","canvas","current","width","height","context","getContext","scale","lineCap","strokeStyle","lineWidth","document","body","overflow","checkIfRoundOver","setInterval","clearInterval","ml","border","onMouseDown","nativeEvent","clientX","clientY","offsetX","offsetLeft","offsetY","offsetTop","beginPath","date","Date","toConsumableArray","x","y","start","time","getTime","onMouseUp","closePath","onMouseMove","_ref","lineTo","stroke","onTouchStart","_nativeEvent$changedT","changedTouches","pageX","pageY","moveTo","onTouchMove","_nativeEvent$changedT2","onTouchEnd","ref","ButtonGroup","boxShadow","mr","clearRect","disabled","WaitingPage","checkIfJoined","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","console","log","stop","apply","this","arguments","GuessWord","score","setScore","isReady","setIsReady","submittedWord","setSubmittedWord","isViewing","setisViewing","requestData","abrupt","req","ready","draw","_ref2","_callee3","previous","_context3","forEach","_ref3","_callee2","element","_context2","setTimeout","length","_x","_x2","isMatch","App","react_router","path","components_Welcome","components_ChooseWord","components_DrawWord","components_WaitingPage","components_GuessWord","ReactDOM","render","StrictMode","src_App_0","getElementById"],"mappings":"6KAAMA,EAEG,YAFHA,EAGI,OAKKC,EAFH,GAAAC,OALE,OAKF,OAAAA,OAA+BF,EAA/B,KAAAE,OAAgDF,uCCwE7CG,EArEC,WAAM,IAAAC,EACIC,mBAAS,IADbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACbK,EADaH,EAAA,GACPI,EADOJ,EAAA,GAAAK,EAEIN,mBAAS,IAFbO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEbE,EAFaD,EAAA,GAEPE,EAFOF,EAAA,GAGdG,EAAWC,cA6BjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,GAAI,CACPC,GAAI,EACJC,QAAS,OACTC,cAAe,SACfC,WAAY,WAEdT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,aACAZ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,QACAZ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,oBAEAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIC,MAAM,OACNC,KAAO,QACPC,GAAG,OACHxB,KAAK,OACLyB,SAAU,SAACC,GAASzB,EAAQyB,EAAMC,OAAOC,UAE3CpB,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQT,QAAQ,YAAYU,QAhDT,WACrBC,IAAMC,KAAN,GAAAvC,OAAcD,EAAd,mBAAuC,CAACQ,QAAO,CAACI,SACjD6B,KAAK,SAACC,GACLC,aAAaC,QAAQ,OAAQF,EAAIG,QAClCC,MAAM,SAACC,GACUA,EAAMC,UAAWD,EAAMC,SAASH,OAEhDN,IAAMU,IAAN,GAAAhD,OAAaD,EAAb,qBACCyC,KAAK,SAACC,GACLC,aAAaC,QAAQ,SAAUF,EAAIG,MACnC/B,EAAS,WACVgC,MAAM,SAACC,GACUA,EAAMC,UAAWD,EAAMC,SAASH,SAoChD,mBACE7B,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACCC,MAAM,cACNC,KAAO,QACPC,GAAG,OACHxB,KAAK,OACLyB,SAAU,SAACC,GAASrB,EAAQqB,EAAMC,OAAOC,UAE3CpB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQT,QAAQ,YAAYU,QA1CnB,WACfC,IAAMC,KAAN,GAAAvC,OAAcD,EAAd,mBAAuC,CAACY,SACvC6B,KAAK,SAACC,GACLC,aAAaC,QAAQ,SAAUF,EAAIG,MACnC/B,EAAS,iBAEVgC,MAAM,SAACC,GACUA,EAAMC,UAAWD,EAAMC,SAASH,SAmC5C,gCCPOK,EAxDI,WAAM,IAAA/C,EACGC,mBAAS,IADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChBgD,EADgB9C,EAAA,GACT+C,EADS/C,EAAA,GAGjBS,EAAWC,cACjBsC,oBAAU,WACNd,IAAMU,IAAN,GAAAhD,OAAaD,EAAb,2BACKyC,KAAK,SAACC,GACLU,EAASV,EAAIG,QACZC,MAAM,SAACC,GACUA,EAAMC,UAAWD,EAAMC,SAASH,QAEzD,IACH,IAAMS,EAAW,SAACpB,GACdK,IAAMC,KAAN,GAAAvC,OAAcD,EAAd,8BACA,CAAEuD,KAAMrB,EAAMsB,cAAcC,aAC5B,CAAEC,QAAS,CAAE9C,KAAQ+B,aAAagB,QAAQ,aACrClB,KAAK,SAACC,GACH5B,EAAS,gBACVgC,MAAM,SAACC,GACUA,EAAMC,UAAWD,EAAMC,SAASH,QAG5D,OACI7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,GAAI,CACZC,GAAI,GACJC,QAAS,OACTC,cAAe,SACfC,WAAY,WAEdT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,gBACAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACCiC,EAAMS,IAAI,SAACC,EAAKC,GACT,OAAQ9C,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACTF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQT,QAAQ,WAAWG,KAAK,QAAQV,GAAI,CAAE0C,EAAG,GAAKzB,QAASgB,EAAUU,IAAKF,GAAG9C,EAAAC,EAAAC,cAAA,YAAO2C,OAIpG7C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,GAAG,IAAIC,MAAO,CAAEC,eAAgB,SACtCpD,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQT,QAAQ,YAAYG,KAAK,SAAjC,6BC4HSsC,EA7KE,WACf,IAQIC,EAREC,EAAYC,iBAAO,MACnBC,EAAaD,iBAAO,MAFLrE,EAGaC,oBAAS,GAHtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGduE,EAHcrE,EAAA,GAGHsE,EAHGtE,EAAA,GAAAK,EAIGN,mBAAS,IAJZO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAIdmC,EAJclC,EAAA,GAIRiE,EAJQjE,EAAA,GAAAkE,EAKOzE,oBAAS,GALhB0E,EAAAxE,OAAAC,EAAA,EAAAD,CAAAuE,EAAA,GAKdE,EALcD,EAAA,GAKNE,EALMF,EAAA,GAAAG,EAMe7E,mBAAS,IANxB8E,EAAA5E,OAAAC,EAAA,EAAAD,CAAA2E,EAAA,GAMdE,EANcD,EAAA,GAMFE,EANEF,EAAA,GAAAG,EAOmBjF,mBAAS,GAP5BkF,EAAAhF,OAAAC,EAAA,EAAAD,CAAA+E,EAAA,GAOdE,EAPcD,EAAA,GAOAE,EAPAF,EAAA,GAQfxE,EAAWC,cAIjBsC,oBAAU,WACRoC,IACAC,KACC,IAGH,IAAMD,EAAgB,WACpBlD,IAAMU,IAAN,GAAAhD,OAAaD,EAAb,wBACE,CAAE0D,QAAS,CAAE9C,KAAQ+B,aAAagB,QAAQ,aACzClB,KAAK,SAACC,GACL0C,EAAc1C,EAAIG,KAAKU,QACtBT,MAAM,SAACC,GACQA,EAAMC,UAAWD,EAAMC,SAASH,QAIhD6C,EAAkB,WACtBnD,IAAMU,IAAN,GAAAhD,OAAaD,EAAb,0BACE,CAAE0D,QAAS,CAAE9C,KAAQ+B,aAAagB,QAAQ,aACzClB,KAAK,SAACC,GACL8C,EAAgB9C,EAAIG,QACnBC,MAAM,SAACC,GACQA,EAAMC,UAAWD,EAAMC,SAASH,QAItDQ,oBAAU,WACN,IAAMsC,EAASpB,EAAUqB,QACzBD,EAAOE,MAAQ,IACfF,EAAOG,OAAS,IAChBH,EAAOxB,MAAM0B,MAAb,QACAF,EAAOxB,MAAM2B,OAAb,QACA,IAAMC,EAAUJ,EAAOK,WAAW,MAClCD,EAAQE,MAAM,GAAK,EAAG,GAAK,GAC3BF,EAAQG,QAAU,QAClBH,EAAQI,YAAc,QACtBJ,EAAQK,UAAY,EACpB3B,EAAWmB,QAAUG,EACrBM,SAASC,KAAKnC,MAAMoC,SAAW,UAChC,IAEH,IAgEMC,EAAmB,WACrBlC,EAAWmC,YAAY,WACnBlE,IAAMU,IAAN,GAAAhD,OAAaD,EAAb,2BACI,CAAE0D,QAAS,CAAE9C,KAAQ+B,aAAagB,QAAQ,aACzClB,KAAK,SAACC,GACCA,EAAIG,OACJ6D,cAAcpC,GACdxD,EAAS,kBAEdgC,MAAM,SAACC,GACUA,EAAMC,UAAWD,EAAMC,SAASH,QAEzD,MAGP,OACI7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,GAAI,CACTC,GAAI,EACJC,QAAS,OACTC,cAAe,SACfC,WAAY,WAEdT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYL,GAAI,CAAEsF,GAAI,GAAKhF,MAAM,OAAOC,QAAQ,MAAhD,oCACAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,KAAyCuD,EAAzC,MACAnE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,YAAgD2D,EAAhD,KACAvE,EAAAC,EAAAC,cAAA,UACQiD,MAAO,CAAEyC,OAAM,kBACfC,YA/FS,SAACC,GAAgB,IAC1BC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QACXC,EAAUF,EAAUxC,EAAUqB,QAAQsB,WACtCC,EAAUH,EAAUzC,EAAUqB,QAAQwB,UAC5C3C,EAAWmB,QAAQyB,YACnB1C,GAAa,GACb,IAAI2C,EAAO,IAAIC,KACf3C,EAAO,GAAA3E,OAAAK,OAAAkH,EAAA,EAAAlH,CAAKuC,GAAL,CAAW,CAAE4E,EAAGR,EAASS,EAAGP,EAASQ,OAAO,EAAMC,KAAMN,EAAKO,eAyF5DC,UAvFU,WAClBrD,EAAWmB,QAAQmC,YACnBpD,GAAa,IAsFLqD,YApFQ,SAAAC,GAAqB,IAAlBnB,EAAkBmB,EAAlBnB,YACnB,GAAKpC,EAAL,CADqC,IAI7BuC,EAAqBH,EAArBG,QAASE,EAAYL,EAAZK,QACjB1C,EAAWmB,QAAQsC,OAAOjB,EAASE,GACnC1C,EAAWmB,QAAQuC,SACnB,IAAIb,EAAO,IAAIC,KACf3C,EAAO,GAAA3E,OAAAK,OAAAkH,EAAA,EAAAlH,CAAKuC,GAAL,CAAW,CAAE4E,EAAGR,EAASS,EAAGP,EAASQ,OAAO,EAAOC,KAAMN,EAAKO,gBA6E7DO,aA1Ec,SAACtB,GAAgB,IAAAuB,EACdvB,EAAYwB,eAAe,GAA5CC,EAD+BF,EAC/BE,MAAOC,EADwBH,EACxBG,MACTvB,EAAUsB,EAAQhE,EAAUqB,QAAQsB,WACpCC,EAAUqB,EAAQjE,EAAUqB,QAAQwB,UAC1C3C,EAAWmB,QAAQyB,YACnB5C,EAAWmB,QAAQ6C,OAAOxB,EAASE,GACnCxC,GAAa,GACb,IAAI2C,EAAO,IAAIC,KACf3C,EAAO,GAAA3E,OAAAK,OAAAkH,EAAA,EAAAlH,CAAKuC,GAAL,CAAW,CAAE4E,EAAGR,EAASS,EAAGP,EAASQ,OAAO,EAAMC,KAAMN,EAAKO,eAmE5Da,YAjEa,SAAC5B,GAAgB,IAAA6B,EACb7B,EAAYwB,eAAe,GAA5CC,EAD8BI,EAC9BJ,MAAOC,EADuBG,EACvBH,MACTvB,EAAUsB,EAAQhE,EAAUqB,QAAQsB,WACpCC,EAAUqB,EAAQjE,EAAUqB,QAAQwB,UAC1C3C,EAAWmB,QAAQsC,OAAOjB,EAASE,GACnC1C,EAAWmB,QAAQuC,SACnB,IAAIb,EAAO,IAAIC,KACf3C,EAAO,GAAA3E,OAAAK,OAAAkH,EAAA,EAAAlH,CAAKuC,GAAL,CAAW,CAAE4E,EAAGR,EAASS,EAAGP,EAASQ,OAAO,EAAOC,KAAMN,EAAKO,eA2D7De,WAxDe,SAAC9B,GACxBrC,EAAWmB,QAAQmC,aAwDXc,IAAKtE,IAETvD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4H,EAAA,EAAD,CAAalH,QAAQ,YAAYG,KAAK,SAASV,GAAI,CAAE0H,UAAW,IAChE/H,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQhB,GAAI,CAAE2H,GAAK,GAAK1G,QAzDZ,WAChBmC,EAAWmB,QAAQqD,UAAU,EAAG,EAAGxE,EAAWmB,QAAQD,OAAOE,MAAOpB,EAAWmB,QAAQD,OAAOG,QAC9FlB,EAAQ,KAuD0CsE,SAAUnE,GAAxD,SACA/D,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQhB,GAAI,CAAEsF,GAAI,GAAKrE,QAtDL,WACtBC,IAAMC,KAAN,GAAAvC,OAAcD,EAAd,kBACI6C,EACA,CAAEa,QAAS,CAAE9C,KAAQ+B,aAAagB,QAAQ,aACzClB,KAAK,SAACC,GACHsC,GAAU,GACVwB,MACD1D,MAAM,SAACC,GACUA,EAAMC,UAAWD,EAAMC,SAASH,QA8CDqG,SAAUnE,GAA7D,SAEJ/D,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,GAAG,IAAIC,MAAO,CAAEC,eAAgB,SACtCpD,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQT,QAAQ,YAAYG,KAAK,SAAjC,qCC3GSoH,EA3DK,WAChB,IAAI7E,EACExD,EAAWC,cACX2C,EAAU,CAAE9C,KAAQ+B,aAAagB,QAAQ,UAAWnD,KAAQmC,aAAagB,QAAQ,SACjFyF,EAAa,eAAAnB,EAAA3H,OAAA+I,EAAA,EAAA/I,CAAAgJ,EAAArI,EAAAsI,KAAG,SAAAC,IAAA,OAAAF,EAAArI,EAAAwI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAElBtF,EAAWmC,YAAY,WACnBlE,IAAMU,IAAN,GAAAhD,OAAaD,EAAb,+BACI,CAAE0D,YACDjB,KAAK,SAACC,GACHmH,QAAQC,IAAIpH,EAAIG,MACA,GAAZH,EAAIG,OACJ6D,cAAcpC,GACV5B,EAAIG,KAAO,GACX/B,EAAS,mBAGlBgC,MAAM,SAACC,GACUA,EAAMC,UAAWD,EAAMC,SAASH,QAEzD,KAhBe,wBAAA6G,EAAAK,SAAAP,MAAH,yBAAAvB,EAAA+B,MAAAC,KAAAC,YAAA,GAqBrB,OAHE7G,oBAAU,WACN+F,MAGJpI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,GAAI,CACTC,GAAI,EACJC,QAAS,OACTC,cAAe,SACfC,WAAY,WAEdT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,UAA8Ce,aAAagB,QAAQ,QAAnE,KACA3C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,6BACAZ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,gBACAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,yBACAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAMe,aAAagB,QAAQ,UAA5D,KACA3C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,GAAG,IAAIC,MAAO,CAAEC,eAAgB,SACtCpD,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQT,QAAQ,YAAYG,KAAK,SAAjC,YCiGSoI,EAnJG,WACd,IAUI7F,EAVExD,EAAWC,cADGZ,EAEMC,mBAAS,GAFfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEbiK,EAFa/J,EAAA,GAENgK,EAFMhK,EAAA,GAGdkE,EAAYC,iBAAO,MACnBC,EAAaD,iBAAO,MAJN9D,EAMUN,oBAAS,GANnBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAMb4J,EANa3J,EAAA,GAMJ4J,EANI5J,EAAA,GAAAkE,EAOsBzE,mBAAS,IAP/B0E,EAAAxE,OAAAC,EAAA,EAAAD,CAAAuE,EAAA,GAOb2F,EAPa1F,EAAA,GAOE2F,EAPF3F,EAAA,GAAAG,EAQI7E,mBAAS,IARb8E,EAAA5E,OAAAC,EAAA,EAAAD,CAAA2E,EAAA,GAQbpC,EARaqC,EAAA,GAQPN,EAROM,EAAA,GAAAG,EAScjF,oBAAS,GATvBkF,EAAAhF,OAAAC,EAAA,EAAAD,CAAA+E,EAAA,GASbqF,EATapF,EAAA,GASFqF,EATErF,EAAA,GAapBjC,oBAAU,WACRqC,KACD,IAED,IAAMA,EAAkB,WACtBnD,IAAMU,IAAN,GAAAhD,OAAaD,EAAb,0BACE,CAAE0D,QAAS,CAAE9C,KAAQ+B,aAAagB,QAAQ,aACzClB,KAAK,SAACC,GACH2H,EAAS3H,EAAIG,QACdC,MAAM,SAACC,GACQA,EAAMC,UAAWD,EAAMC,SAASH,QAItDQ,oBAAU,WACN,IAAMsC,EAASpB,EAAUqB,QACzBD,EAAOE,MAAQ,IACfF,EAAOG,OAAS,IAChBH,EAAOxB,MAAM0B,MAAb,QACAF,EAAOxB,MAAM2B,OAAb,QACA,IAAMC,EAAUJ,EAAOK,WAAW,MAClCD,EAAQE,MAAM,GAAG,EAAG,GAAG,GACvBF,EAAQG,QAAU,QAClBH,EAAQI,YAAc,QACtBJ,EAAQK,UAAY,EACpB3B,EAAWmB,QAAUG,EACrB6E,KACD,IAEH,IAAMA,EAAW,eAAA3C,EAAA3H,OAAA+I,EAAA,EAAA/I,CAAAgJ,EAAArI,EAAAsI,KAAG,SAAAC,IAAA,OAAAF,EAAArI,EAAAwI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACZU,EADY,CAAAZ,EAAAE,KAAA,eAAAF,EAAAmB,OAAA,iBAIhBvG,EAAWmC,YAAY,WACnBlE,IAAMU,IAAN,GAAAhD,OAAaD,EAAb,iBACI,CAAE0D,QAAS,CAAE9C,KAAQ+B,aAAagB,QAAQ,aACzClB,KAAK,SAACqI,GACCA,EAAIjI,KAAKkI,QACTnG,EAAQkG,EAAIjI,KAAKA,MACjB0H,GAAW,GACX7D,cAAcpC,MAEnBxB,MAAM,SAACC,GACUA,EAAMC,UAAWD,EAAMC,SAASH,QAEzD,KAhBa,wBAAA6G,EAAAK,SAAAP,MAAH,yBAAAvB,EAAA+B,MAAAC,KAAAC,YAAA,GAmBXc,EAAI,eAAAC,EAAA3K,OAAA+I,EAAA,EAAA/I,CAAAgJ,EAAArI,EAAAsI,KAAG,SAAA2B,IAAA,IAAAC,EAAA,OAAA7B,EAAArI,EAAAwI,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,OACTnF,EAAWmB,QAAQqD,UAAU,EAAG,EAAGxE,EAAWmB,QAAQD,OAAOE,MAAOpB,EAAWmB,QAAQD,OAAOG,QAC1FqF,EAAW,CAAEvD,KAAM/E,EAAK,GAAG+E,MAC/B+C,GAAa,GACb9H,EAAKwI,QAAL,eAAAC,EAAAhL,OAAA+I,EAAA,EAAA/I,CAAAgJ,EAAArI,EAAAsI,KAAa,SAAAgC,EAAOC,EAAS1H,GAAhB,OAAAwF,EAAArI,EAAAwI,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,OACT8B,WAAW,WACHF,EAAQ7D,OACRlD,EAAWmB,QAAQmC,YACnBtD,EAAWmB,QAAQyB,YACnB5C,EAAWmB,QAAQ6C,OAAO+C,EAAQ/D,EAAG+D,EAAQ9D,KAG7CjD,EAAWmB,QAAQsC,OAAOsD,EAAQ/D,EAAG+D,EAAQ9D,GAC7CjD,EAAWmB,QAAQuC,UAEnBrE,IAAMjB,EAAK8I,OAAS,GACpBhB,GAAa,GAEjBQ,EAAWK,GACXA,EAAQ5D,KAAOuD,EAASvD,MAfnB,wBAAA6D,EAAA1B,SAAAwB,MAAb,gBAAAK,EAAAC,GAAA,OAAAP,EAAAtB,MAAAC,KAAAC,YAAA,IAJS,wBAAAkB,EAAArB,SAAAmB,MAAH,yBAAAD,EAAAjB,MAAAC,KAAAC,YAAA,GA0CV,OACElJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,GAAI,CACXC,GAAI,EACJC,QAAS,OACTC,cAAe,SACfC,WAAY,WAEdT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,oBACAZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,YAAgDwI,EAAhD,KACApJ,EAAAC,EAAAC,cAAA,UACUiD,MAAO,CAAEyC,OAAM,kBACfiC,IAAKtE,IAEXvD,EAAAC,EAAAC,cAAA,WACEoJ,EACCtJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZH,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQT,QAAQ,YAAYG,KAAK,SAASV,GAAI,CAAEsF,GAAK,IAAMrE,QAAS0I,EAAM9B,SAAUwB,GAApF,gBACA1J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACCC,MAAM,SACPC,KAAO,QACPC,GAAG,aACHC,SAAU,SAACC,GAASuI,EAAiBvI,EAAMC,OAAOC,UAEjDpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQT,QAAQ,YAAYG,KAAK,SAASV,GAAI,CAAEsF,GAAK,GAAKrE,QAjDlD,WACjBC,IAAMC,KAAN,GAAAvC,OAAcD,EAAd,8BACA,CAACuD,KAAKiH,GACN,CAAE9G,QAAS,CAAE9C,KAAQ+B,aAAagB,QAAQ,aACzClB,KAAK,SAACC,GACeA,EAAIG,KAAfiJ,QAQPhL,EAAS,kBAEVgC,MAAM,SAACC,GACUA,EAAMC,UAAWD,EAAMC,SAASH,SAiC3C,YAZM7B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,MAAjC,0BAejBZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAMC,GAAG,IAAIC,MAAO,CAAEC,eAAgB,SACtCpD,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQT,QAAQ,YAAYG,KAAK,SAAjC,YC/HSgK,EAfH,WACV,OACE/K,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACCjD,EAAAC,EAAAC,cAAC8K,EAAA,EAAD,KACChL,EAAAC,EAAAC,cAAC8K,EAAA,EAAD,CAAOC,KAAK,IAAIT,QAASxK,EAAAC,EAAAC,cAACgL,EAAD,QACzBlL,EAAAC,EAAAC,cAAC8K,EAAA,EAAD,CAAOC,KAAK,eAAeT,QAASxK,EAAAC,EAAAC,cAACiL,EAAD,QACpCnL,EAAAC,EAAAC,cAAC8K,EAAA,EAAD,CAAOC,KAAK,aAAaT,QAASxK,EAAAC,EAAAC,cAACkL,EAAD,QAClCpL,EAAAC,EAAAC,cAAC8K,EAAA,EAAD,CAAOC,KAAK,QAAQT,QAASxK,EAAAC,EAAAC,cAACmL,EAAD,QAC7BrL,EAAAC,EAAAC,cAAC8K,EAAA,EAAD,CAAOC,KAAK,cAAcT,QAASxK,EAAAC,EAAAC,cAACoL,EAAD,WCZzCC,IAASC,OACPxL,EAAAC,EAAAC,cAACF,EAAAC,EAAMwL,WAAP,KACEzL,EAAAC,EAAAC,cAACwL,EAAD,OAEFrG,SAASsG,eAAe","file":"static/js/main.f988746a.chunk.js","sourcesContent":["const serverInfo = {\r\n    protocol: 'Http',\r\n    ip : 'localhost',\r\n    port: '5000'\r\n}\r\n\r\nconst server = `${serverInfo.protocol}://${serverInfo.ip}:${serverInfo.port}`\r\n\r\nexport default server\r\n","import React from 'react'\r\nimport { useState } from \"react\";\r\nimport Axios from 'axios'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport server from '../serverInfo'\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport { Button, Box } from '@mui/material';\r\n\r\nconst Welcome = () => {\r\n  const [name, setName] = useState('')\r\n  const [room, setRoom] = useState('')\r\n  const navigate = useNavigate()\r\n\r\n  const requestNewRoom = () =>{\r\n    Axios.post(`${server}/users/username`, {name}, {room})\r\n  .then((res)=>{\r\n    localStorage.setItem('Name', res.data)\r\n}).catch((error)=>{\r\n    const message = error.response ? error.response.data : \"Network Error\";\r\n});\r\n    Axios.get(`${server}/users/getRoomID`)\r\n    .then((res)=>{\r\n      localStorage.setItem('RoomID', res.data)\r\n      navigate('/wait')\r\n  }).catch((error)=>{\r\n      const message = error.response ? error.response.data : \"Network Error\";\r\n  });\r\n}\r\n\r\nconst joinRoom = () =>{\r\n  Axios.post(`${server}/users/joinRoom`, {room})\r\n  .then((res) =>{\r\n    localStorage.setItem('RoomID', res.data)\r\n    navigate('/guess-word')\r\n  })\r\n  .catch((error) =>{\r\n    const message = error.response ? error.response.data : \"Network Error\";\r\n  });\r\n}\r\n\r\n  return (\r\n    <div className='WelcomePage'>\r\n      <Box sx={{\r\n        my: 8,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n      }}>\r\n      <Typography color=\"blue\" variant=\"h2\"> Welcome </Typography>\r\n      <Typography color=\"blue\" variant=\"h4\"> To </Typography>\r\n      <Typography color=\"blue\" variant=\"h3\"> Draw and Guess </Typography>\r\n      \r\n      <br/>\r\n      <TextField\r\n          label=\"Name\"\r\n          size = \"small\"\r\n          id=\"name\"\r\n          name=\"name\"\r\n          onChange={(event)=>{setName(event.target.value)}}\r\n        />\r\n        <br/>\r\n      <Button variant=\"contained\" onClick={requestNewRoom}>Create new Game</Button>\r\n        <br/>\r\n         <TextField\r\n          label=\"Room number\"\r\n          size = \"small\"\r\n          id=\"room\"\r\n          name=\"room\"\r\n          onChange={(event)=>{setRoom(event.target.value)}}\r\n        />\r\n        <br/>\r\n        <Button variant=\"contained\" onClick={joinRoom}>Start Exists Game</Button>\r\n      </Box>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Welcome","import React from 'react'\r\nimport { useState, useEffect } from \"react\";\r\nimport Axios from 'axios'\r\nimport { useNavigate } from 'react-router'\r\nimport server from '../serverInfo'\r\nimport Typography from '@mui/material/Typography';\r\nimport { Button, Box } from '@mui/material';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ChooseWord = () => {\r\n  const [words, setWords] = useState([])\r\n\r\n  const navigate = useNavigate()\r\n  useEffect(() => {\r\n      Axios.get(`${server}/Words/getRandomsWords`)\r\n          .then((res) => {\r\n            setWords(res.data)\r\n          }).catch((error) => {\r\n              const message = error.response ? error.response.data : \"Network Error\";\r\n          })\r\n  }, [])\r\n  const sendWord = (event) => {\r\n      Axios.post(`${server}/Words/receivingChosenWord`, \r\n      { word: event.currentTarget.textContent },\r\n      { headers: { \"room\": localStorage.getItem(\"RoomID\") } })\r\n          .then((res) => {\r\n              navigate('/draw-word')\r\n          }).catch((error) => {\r\n              const message = error.response ? error.response.data : \"Network Error\";\r\n          })\r\n  }\r\n  return (\r\n      <div className='ChooseWord'>\r\n           <Box sx={{\r\n        my: 10,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n      }}>\r\n      <br/>\r\n      <Typography color=\"blue\" variant=\"h2\"> Choose Word</Typography>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      {words.map((item,i) => {\r\n              return (<div><br />\r\n                  <Button variant=\"outlined\" size=\"large\" sx={{ m: 1 }} onClick={sendWord} key={i}><span>{item}</span></Button>\r\n              </div>\r\n              )\r\n          })}\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <Link to=\"/\" style={{ textDecoration: 'none' }}>\r\n      <Button variant=\"contained\" size=\"small\" >Exit</Button>\r\n      </Link>\r\n      </Box>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default ChooseWord","import React from 'react'\r\nimport { useEffect, useState, useRef } from 'react'\r\nimport Axios from 'axios'\r\nimport server from '../serverInfo'\r\nimport { useNavigate } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Button, Box, ButtonGroup } from '@mui/material';\r\n\r\nconst DrawWord = () => {\r\n  const canvasRef = useRef(null)\r\n  const contextRef = useRef(null)\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n  const [data, setData] = useState([])\r\n  const [isSent, setIsSent] = useState(false)\r\n  const [chosenWord, setChosenWord] = useState('')\r\n  const [sessionScore, setSessionScore] = useState(0)\r\n  const navigate = useNavigate()\r\n  var interval\r\n  \r\n\r\n  useEffect(() => {\r\n    getChosenWord()\r\n    getSessionScore()\r\n  }, [])\r\n\r\n\r\n  const getChosenWord = () => {\r\n    Axios.get(`${server}/Words/getChosenWord`,\r\n      { headers: { \"room\": localStorage.getItem(\"RoomID\") } })\r\n      .then((res) => {\r\n        setChosenWord(res.data.word)\r\n      }).catch((error) => {\r\n        const message = error.response ? error.response.data : \"Network Error\";\r\n      })\r\n  }\r\n\r\n  const getSessionScore = () => {\r\n    Axios.get(`${server}/users/getSessionScore`,\r\n      { headers: { \"room\": localStorage.getItem(\"RoomID\") } })\r\n      .then((res) => {\r\n        setSessionScore(res.data)\r\n      }).catch((error) => {\r\n        const message = error.response ? error.response.data : \"Network Error\";\r\n      })\r\n    }\r\n\r\n  useEffect(() => {\r\n      const canvas = canvasRef.current;\r\n      canvas.width = 300;\r\n      canvas.height = 300;\r\n      canvas.style.width = `300px`;\r\n      canvas.style.height = `300px`;\r\n      const context = canvas.getContext(\"2d\")\r\n      context.scale(10 / 9, 10 / 9)\r\n      context.lineCap = \"round\";\r\n      context.strokeStyle = \"black\";\r\n      context.lineWidth = 5\r\n      contextRef.current = context;\r\n      document.body.style.overflow = \"hidden\";\r\n  }, [])\r\n  // Mouse Listener\r\n  const startDrawing = (nativeEvent) => {\r\n      const { clientX, clientY } = nativeEvent;\r\n      const offsetX = clientX - canvasRef.current.offsetLeft\r\n      const offsetY = clientY - canvasRef.current.offsetTop\r\n      contextRef.current.beginPath();\r\n      setIsDrawing(true)\r\n      let date = new Date()\r\n      setData([...data, { x: offsetX, y: offsetY, start: true, time: date.getTime() }])\r\n  }\r\n  const finishDrawing = () => {\r\n      contextRef.current.closePath();\r\n      setIsDrawing(false)\r\n  }\r\n  const moveDrawing = ({ nativeEvent }) => {\r\n      if (!isDrawing) {\r\n          return;\r\n      }\r\n      const { offsetX, offsetY } = nativeEvent;\r\n      contextRef.current.lineTo(offsetX, offsetY)\r\n      contextRef.current.stroke()\r\n      let date = new Date()\r\n      setData([...data, { x: offsetX, y: offsetY, start: false, time: date.getTime() }])\r\n  }\r\n  // Touch Listener\r\n  const startDrawingTouch = (nativeEvent) => {\r\n      const { pageX, pageY } = nativeEvent.changedTouches[0];\r\n      const offsetX = pageX - canvasRef.current.offsetLeft\r\n      const offsetY = pageY - canvasRef.current.offsetTop\r\n      contextRef.current.beginPath();\r\n      contextRef.current.moveTo(offsetX, offsetY);\r\n      setIsDrawing(true)\r\n      let date = new Date()\r\n      setData([...data, { x: offsetX, y: offsetY, start: true, time: date.getTime() }])\r\n  }\r\n  const moveDrawingTouch = (nativeEvent) => {\r\n      const { pageX, pageY } = nativeEvent.changedTouches[0];\r\n      const offsetX = pageX - canvasRef.current.offsetLeft\r\n      const offsetY = pageY - canvasRef.current.offsetTop\r\n      contextRef.current.lineTo(offsetX, offsetY)\r\n      contextRef.current.stroke()\r\n      let date = new Date()\r\n      setData([...data, { x: offsetX, y: offsetY, start: false, time: date.getTime() }])\r\n  }\r\n\r\n  const finishDrawingTouch = (nativeEvent) => {\r\n      contextRef.current.closePath();\r\n  }\r\n  // handlers\r\n  const handleClear = () => {\r\n      contextRef.current.clearRect(0, 0, contextRef.current.canvas.width, contextRef.current.canvas.height);\r\n      setData([]);\r\n  }\r\n  const handleSendingData = () => {\r\n      Axios.post(`${server}/Draw/sendData`,\r\n          data,\r\n          { headers: { \"room\": localStorage.getItem(\"RoomID\") } })\r\n          .then((res) => {\r\n              setIsSent(true)\r\n              checkIfRoundOver()\r\n          }).catch((error) => {\r\n              const message = error.response ? error.response.data : \"Network Error\";\r\n          })\r\n  }\r\n\r\n  const checkIfRoundOver = () => {\r\n      interval = setInterval(() => {\r\n          Axios.get(`${server}/users/checkIfRoundOver`,\r\n              { headers: { \"room\": localStorage.getItem(\"RoomID\") } })\r\n              .then((res) => {\r\n                  if (res.data) {\r\n                      clearInterval(interval);\r\n                      navigate('/guess-word')\r\n                  }\r\n              }).catch((error) => {\r\n                  const message = error.response ? error.response.data : \"Network Error\";\r\n              })\r\n      }, 5000);\r\n  }\r\n\r\n  return (\r\n      <div className=\"Draw\">\r\n        <Box sx={{\r\n        my: 6,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n      }}>\r\n      <br/>\r\n      <Typography sx={{ ml: 1 }} color=\"blue\" variant=\"h3\">  The word you need to draw is: </Typography>\r\n      <br/>\r\n      <Typography color=\"blue\" variant=\"h2\"> \"{chosenWord}\" </Typography>\r\n      <br/>\r\n      <Typography color=\"blue\" variant=\"h4\"> Score : {sessionScore} </Typography>\r\n      <canvas\r\n              style={{ border: `2px solid #000` }}\r\n              onMouseDown={startDrawing}\r\n              onMouseUp={finishDrawing}\r\n              onMouseMove={moveDrawing}\r\n              onTouchStart={startDrawingTouch}\r\n              onTouchMove={moveDrawingTouch}\r\n              onTouchEnd={finishDrawingTouch}\r\n              ref={canvasRef}\r\n          />\r\n          <br />\r\n          <ButtonGroup variant=\"contained\" size=\"medium\" sx={{ boxShadow: 0 }} >\r\n          <Button sx={{ mr : 3 }} onClick={handleClear} disabled={isSent}>clear</Button>\r\n          <Button sx={{ ml: 3 }} onClick={handleSendingData} disabled={isSent}>send</Button>\r\n          </ButtonGroup>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <Link to=\"/\" style={{ textDecoration: 'none' }}>\r\n      <Button variant=\"contained\" size=\"small\" >Exit</Button>\r\n      </Link>\r\n      </Box>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default DrawWord","import React from 'react'\r\nimport { useEffect } from \"react\";\r\nimport { useNavigate } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport Axios from 'axios';\r\nimport server from '../serverInfo';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Button, Box } from '@mui/material';\r\n\r\nconst WaitingPage = () => {\r\n    var interval\r\n    const navigate = useNavigate()\r\n    const headers = { \"room\": localStorage.getItem(\"RoomID\"), \"name\": localStorage.getItem(\"Name\")  }\r\n    const checkIfJoined = async () => {\r\n\r\n        interval = setInterval(() => {\r\n            Axios.get(`${server}/users/checkAmountOfPlayers`,\r\n                { headers })\r\n                .then((res) => {\r\n                    console.log(res.data);\r\n                    if (res.data != 1) {\r\n                        clearInterval(interval);\r\n                        if (res.data > 1) {\r\n                            navigate('/choose-word')\r\n                        }\r\n                    }\r\n                }).catch((error) => {\r\n                    const message = error.response ? error.response.data : \"Network Error\";\r\n                })\r\n        }, 5000);\r\n    }\r\n    useEffect(() => {\r\n        checkIfJoined()\r\n    })\r\n  return (\r\n    <div className=\"WaitingPage\">\r\n        <Box sx={{\r\n        my: 8,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n      }}>\r\n      <br/>\r\n      <Typography color=\"blue\" variant=\"h3\"> Hello {localStorage.getItem('Name')} </Typography>\r\n      <br/>\r\n      <br/>\r\n      <Typography color=\"blue\" variant=\"h4\"> Wait for another player </Typography>\r\n      <Typography color=\"blue\" variant=\"h4\"> to join :) </Typography>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <Typography color=\"blue\" variant=\"h4\"> Your Room Number is:</Typography>\r\n      <br/>\r\n      <br/>\r\n      <Typography color=\"blue\" variant=\"h3\">{localStorage.getItem('RoomID')} </Typography>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <Link to=\"/\" style={{ textDecoration: 'none' }}>\r\n      <Button variant=\"contained\" size=\"small\" >Exit</Button>\r\n      </Link>\r\n      </Box>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WaitingPage","import React from 'react'\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { useNavigate } from 'react-router'\r\nimport Axios from 'axios'\r\nimport server from '../serverInfo'\r\nimport { Link } from 'react-router-dom';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Button, Box, ButtonGroup } from '@mui/material';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\nconst GuessWord = () => {\r\n    const navigate = useNavigate()\r\n    const [score, setScore] = useState(0)\r\n    const canvasRef = useRef(null)\r\n    const contextRef = useRef(null)\r\n\r\n    const [isReady, setIsReady] = useState(false)\r\n    const [submittedWord, setSubmittedWord] = useState('')\r\n    const [data, setData] = useState([])\r\n    const [isViewing, setisViewing] = useState(false)\r\n\r\n    var interval\r\n  \r\n    useEffect(() => {\r\n      getSessionScore()\r\n  }, [])\r\n  \r\n    const getSessionScore = () => {\r\n      Axios.get(`${server}/users/getSessionScore`,\r\n        { headers: { \"room\": localStorage.getItem(\"RoomID\") } })\r\n        .then((res) => {\r\n            setScore(res.data)\r\n        }).catch((error) => {\r\n          const message = error.response ? error.response.data : \"Network Error\";\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        canvas.width = 300;\r\n        canvas.height = 300;\r\n        canvas.style.width = `300px`;\r\n        canvas.style.height = `300px`;\r\n        const context = canvas.getContext(\"2d\")\r\n        context.scale(10/9, 10/9)\r\n        context.lineCap = \"round\";\r\n        context.strokeStyle = \"black\";\r\n        context.lineWidth = 5\r\n        contextRef.current = context;\r\n        requestData()\r\n    }, [])\r\n    \r\n    const requestData = async () => {\r\n        if (isReady) {\r\n            return\r\n        }\r\n        interval = setInterval(() => {\r\n            Axios.get(`${server}/Draw/getData`,\r\n                { headers: { \"room\": localStorage.getItem(\"RoomID\") } })\r\n                .then((req) => {\r\n                    if (req.data.ready) {\r\n                        setData(req.data.data);\r\n                        setIsReady(true)\r\n                        clearInterval(interval);\r\n                    }\r\n                }).catch((error) => {\r\n                    const message = error.response ? error.response.data : \"Network Error\";\r\n                })\r\n        }, 5000);\r\n    }\r\n\r\n    const draw = async () => {\r\n        contextRef.current.clearRect(0, 0, contextRef.current.canvas.width, contextRef.current.canvas.height);\r\n        let previous = { time: data[0].time };\r\n        setisViewing(true)\r\n        data.forEach(async (element, i) => {\r\n            setTimeout(() => {\r\n                if (element.start) {\r\n                    contextRef.current.closePath();\r\n                    contextRef.current.beginPath();\r\n                    contextRef.current.moveTo(element.x, element.y);\r\n                }\r\n                else {\r\n                    contextRef.current.lineTo(element.x, element.y);\r\n                    contextRef.current.stroke();\r\n                }\r\n                if (i === data.length - 1) {\r\n                    setisViewing(false)\r\n                }\r\n                previous = element\r\n            }, (element.time - previous.time))\r\n        });\r\n    }\r\n    const handleSubmit = () =>{\r\n        Axios.post(`${server}/Words/receivingSubmitWord`,\r\n        {word:submittedWord},\r\n        { headers: { \"room\": localStorage.getItem(\"RoomID\") } })\r\n        .then((res)=>{\r\n            const {isMatch} = res.data\r\n            if(isMatch){\r\n                \r\n            }\r\n            else{\r\n               \r\n            }\r\n\r\n            navigate('/choose-word')\r\n\r\n        }).catch((error) =>{\r\n            const message = error.response ? error.response.data : \"Network Error\";\r\n        })\r\n    }\r\n  \r\n    return (\r\n      <div className=\"GuessPage\">\r\n          <Box sx={{\r\n        my: 6,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n      }}>\r\n      <br/>\r\n      <Typography color=\"blue\" variant=\"h3\"> Guess the word </Typography>\r\n      <br/>\r\n      <Typography color=\"blue\" variant=\"h4\"> Score : {score} </Typography>\r\n      <canvas\r\n                style={{ border: `2px solid #000` }}\r\n                ref={canvasRef}\r\n            />\r\n          <br />\r\n          {!isReady ? (<Typography color=\"blue\" variant=\"h4\"> Waiting for the Draw </Typography>) :\r\n            (<div className=\"GuessPage\">\r\n                <Button variant=\"contained\" size=\"medium\" sx={{ ml : 10 }} onClick={draw} disabled={isViewing}>View drawing</Button>\r\n                <div className=\"GuessPage\">\r\n                <br />\r\n                <br />\r\n                <TextField\r\n                 label=\"Answer\"\r\n                size = \"small\"\r\n                id=\"The Guess:\"\r\n                onChange={(event)=>{setSubmittedWord(event.target.value)}}\r\n                />\r\n                 <Button variant=\"contained\" size=\"medium\" sx={{ ml : 1 }} onClick={handleSubmit} >Submit</Button>\r\n                </div>\r\n            </div>)}\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <Link to=\"/\" style={{ textDecoration: 'none' }}>\r\n      <Button variant=\"contained\" size=\"small\" >Exit</Button>\r\n      </Link>\r\n      </Box>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default GuessWord","import React from 'react';\nimport './App.css';\nimport Welcome from './components/Welcome';\nimport ChooseWord from \"./components/ChooseWord\";\nimport DrawWord from \"./components/DrawWord\";\nimport WaitingPage from \"./components/WaitingPage\";\nimport GuessWord from \"./components/GuessWord\"\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n     <Routes>\n      <Route path=\"/\" element={<Welcome />} />\n      <Route path=\"/choose-word\" element={<ChooseWord />} />\n      <Route path=\"/draw-word\" element={<DrawWord />} />\n      <Route path=\"/wait\" element={<WaitingPage />} />\n      <Route path=\"/guess-word\" element={<GuessWord />} />\n    </Routes>\n    </BrowserRouter>\n   \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}